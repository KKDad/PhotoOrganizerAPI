plugins {
	id 'java'
	id 'com.coditory.integration-test' version '1.4.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.springdoc.openapi-gradle-plugin' version "1.6.0"
	id 'org.springframework.boot' version '2.7.5'

}

apply plugin: "java"

group = 'org.stapledon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "${java_version}"

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

	implementation 'org.projectlombok:lombok:1.18.24'
	implementation 'io.springfox:springfox-swagger2:3.0.0'

	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core:5.1.1'
	testImplementation 'org.mockito:mockito-inline:5.1.1'

	runtimeOnly 'org.postgresql:postgresql:42.5.3'
	testRuntimeOnly 'org.postgresql:postgresql:42.5.1'

}

springBoot {
	buildInfo()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
tasks.withType(Test).configureEach {
	useJUnitPlatform()
}

jar {
	enabled = false
}

tasks.register("updateApiDocs") {
	copy {
		from 'build/openapi.json'
		into "../docs"
	}
}

jar.dependsOn(bootJar)
jar.dependsOn('updateApiDocs')
updateApiDocs.dependsOn('generateOpenApiDocs')

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

bootBuildImage {
	imageName = "eu.gcr.io/company/imagename"
	builder = "paketobuildpacks/builder:tiny"
	if (System.getenv("IMAGE_TAGS")) {
		tags = (System.getenv("IMAGE_TAGS").split(",") as List<String>).collect { "$imageName:$it" }
	}
}