/* tslint:disable */
/* eslint-disable */
/**
 * PhotoOrganizer API
 * PhotoOrganizer image organizer
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountInfoDto,
} from '../models/index';
import {
    AccountInfoDtoFromJSON,
    AccountInfoDtoToJSON,
} from '../models/index';

export interface CreateaccountRequest {
    accountInfoDto: AccountInfoDto;
}

export interface DeleteaccountRequest {
    id: number;
}

export interface GetaccountRequest {
    id: number;
}

export interface UpdateaccountRequest {
    id: number;
    accountInfoDto: AccountInfoDto;
}

/**
 * 
 */
export class AccountControllerApi extends runtime.BaseAPI {

    /**
     * Create a new account
     */
    async createaccountRaw(requestParameters: CreateaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountInfoDto>> {
        if (requestParameters.accountInfoDto === null || requestParameters.accountInfoDto === undefined) {
            throw new runtime.RequiredError('accountInfoDto','Required parameter requestParameters.accountInfoDto was null or undefined when calling createaccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountInfoDtoToJSON(requestParameters.accountInfoDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoDtoFromJSON(jsonValue));
    }

    /**
     * Create a new account
     */
    async createaccount(requestParameters: CreateaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountInfoDto> {
        const response = await this.createaccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a account
     */
    async deleteaccountRaw(requestParameters: DeleteaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteaccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a account
     */
    async deleteaccount(requestParameters: DeleteaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteaccountRaw(requestParameters, initOverrides);
    }

    /**
     * Get all accounts
     */
    async getAllaccountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccountInfoDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountInfoDtoFromJSON));
    }

    /**
     * Get all accounts
     */
    async getAllaccounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccountInfoDto>> {
        const response = await this.getAllaccountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a account by its id
     */
    async getaccountRaw(requestParameters: GetaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountInfoDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getaccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoDtoFromJSON(jsonValue));
    }

    /**
     * Get a account by its id
     */
    async getaccount(requestParameters: GetaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountInfoDto> {
        const response = await this.getaccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a account
     */
    async updateaccountRaw(requestParameters: UpdateaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountInfoDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateaccount.');
        }

        if (requestParameters.accountInfoDto === null || requestParameters.accountInfoDto === undefined) {
            throw new runtime.RequiredError('accountInfoDto','Required parameter requestParameters.accountInfoDto was null or undefined when calling updateaccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountInfoDtoToJSON(requestParameters.accountInfoDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoDtoFromJSON(jsonValue));
    }

    /**
     * Update a account
     */
    async updateaccount(requestParameters: UpdateaccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountInfoDto> {
        const response = await this.updateaccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
