/* tslint:disable */
/* eslint-disable */
/**
 * PhotoOrganizer API
 * PhotoOrganizer image organizer
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthRequest,
} from '../models/index';
import {
    AuthRequestFromJSON,
    AuthRequestToJSON,
} from '../models/index';

export interface AuthenticateAndGetTokenRequest {
    authRequest: AuthRequest;
}

/**
 * 
 */
export class AuthControllerApi extends runtime.BaseAPI {

    /**
     */
    async authenticateAndGetTokenRaw(requestParameters: AuthenticateAndGetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authRequest === null || requestParameters.authRequest === undefined) {
            throw new runtime.RequiredError('authRequest','Required parameter requestParameters.authRequest was null or undefined when calling authenticateAndGetToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRequestToJSON(requestParameters.authRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async authenticateAndGetToken(requestParameters: AuthenticateAndGetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authenticateAndGetTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
