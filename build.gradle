plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.coditory.integration-test' version '1.1.11'
    id "com.bmuschko.docker-remote-api" version "6.7.0"
}

ext {
    // Organized alphabetically - Please keep it that way!
    assertjVersion = "3.17.2"
    bouncycastleFipsVersion = '1.0.2'
    commonsCliVersion = '1.4'
    dropwizardMetricsServletsVersion = '4.1.12'
    dropwizardSwaggerVersion = '2.0.12-1'
    dropwizardVersion = '2.0.12'
    dropwizardWebSecurity = '1.2.1'
    elasticsearchVersion = '7.10.1'
    gsonVersion = '2.8.6'
    h2Version = '1.4.200'
    hamcrestVersion = '1.3'
    intersetAuthenticationVersion = '2.+'
    janinoVersion = '3.1.2'
    jsonVersion = '20200518'
    junitJupiterVersion = '5.5.1'
    junitVersion = '4.12'
    liquibaseVersion = "3.10.0"
    log4jVersion="2.13.3"
    mockitoVersion = '2.23.0'
    prometheusVersion = '0.8.1'
    reflectionsVersion = '0.9.12'
    sseVersion = "2.31"
    verticaVersion = "9.2.1"
}

subprojects {
    apply plugin: 'java'

    // Load our version number from the version.properties file.
    def propFile = file('../version.properties')
    if (propFile.canRead()){
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props!=null && props.containsKey('PHOTO_ORGANIZER_VERSION'))
            version = props['PHOTO_ORGANIZER_VERSION']
        else
            throw new GradleException('version.properties cannot be loaded or is missing key: PHOTO_ORGANIZER_VERSION')
    } else {
        throw new GradleException('version.properties cannot be read')
    }
    logger.warn "Building version: " + version
    group = 'org.stapledon.photo'

    sourceCompatibility = '1.8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}
