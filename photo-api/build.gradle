apply plugin: "java"
apply plugin: "application"
apply plugin: "com.coditory.integration-test"
apply plugin: "com.github.johnrengelman.shadow"

repositories {
    mavenCentral()
}

import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

mainClassName = 'org.stapledon.photo.main.PhotoCatalogerAPI'

dependencies {
    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "net.java.dev.jna:jna:$jnaVersion"
    implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticsearchVersion"

    runtimeOnly "org.apache.logging.log4j:log4j-core:$log4jVersion"

    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testImplementation "com.google.code.gson:gson:$gsonVersion"

    // Use JUnit test framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

// Return true if ElasticSearch is running on the localhost:9200 and is in  a green state
boolean get_es_status() {
    def ready = false
    try {
        def get = new URL("http://127.0.0.1:9200/_cluster/health").openConnection();
        def body = get.getContent().getText().toString()
        ready = body.contains("green") || body.contains("yellow")
        if (!ready)
            logger.info body
    } catch (Exception e1) {
        logger.info "ES not ready: " + e1
    }
    ready
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.version
        attributes 'Implementation-Vendor-Id': rootProject.group
        attributes 'Build-Time': ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes 'Built-By': InetAddress.localHost.hostName
        attributes 'Created-By': 'Gradle ' + gradle.gradleVersion
        attributes 'Main-Class': mainClassName
    }
}

runShadow {
    args = ['server', "${project.rootDir}/config.yml"]
}